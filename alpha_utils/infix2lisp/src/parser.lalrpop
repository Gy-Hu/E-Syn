use crate::Expr;

grammar;

VariableStr: String = {
    <s:r"[a-z]+\[[0-9]+\]"> => s.to_string(),
    <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string(),
    //match in1[number]
    <s:r"[a-z]+[0-9]+\[[0-9]+\]"> => s.to_string(),
    // match new_ADD64|c_
    <s:r"[a-z_]+[A-Z0-9_]+\|[a-zA-Z0-9_]+"> => s.to_string(),
    //<s:r"[a-zA-Z_][a-zA-Z0-9_]*\|[a-zA-Z0-9_]+"> => s.to_string(),
    // match 0 or 1
    <s:r"[0-1]"> => s.to_string(),
    // support a00, a01, b00, b01 ...
    // <s:r"[a-z]+[0-9]"> => s.to_string(),
    }

Op: String = {
    "*" => "*".to_string(),
    "+" => "+".to_string(),
    "&" => "&".to_string(),
}

NotOp: String = {
    "!" => "!".to_string(),
}


pub Expr: Expr = {
    <n:VariableStr> => Expr::VariableStr(n),
    <not:NotOp> <e:Expr> => Expr::Not(Box::new(e)), 
    "(" <n:VariableStr> ")" => Expr::VariableStr(n),
    //"(" <not:NotOp> "(" <n:Expr> ")" ")"=> Expr::Not(Box::new(e)), 
    //"(" <not:NotOp> <e:Expr> ")" => Expr::Not(Box::new(e)),
    //"(" "! " <e:Expr> ")" => Expr::Not(Box::new(e)),
    //"! " <e:Expr> => Expr::Not(Box::new(e)), 
    //"(" <e:Expr> ")" => e,
    //"(" <not:NotOp> "(" <e:Expr>  ")" ")" => Expr::Not(Box::new(Expr::Lisp(not, Box::new(e)))),
    "(" <not:NotOp> "(" <e1:Expr> <s:Op> <e2:Expr> ")" ")" => Expr::Not(Box::new(Expr::Lisp(s, Box::new(e1), Box::new(e2)))),
    //"(" <not:NotOp> "(" <s:Op> <e1:Expr> <e2:Expr> ")" ")" => Expr::Not(Box::new(Expr::Infix(s, Box::new(e1), Box::new(e2)))),
    "(" <e1:Expr> <s:Op> <e2:Expr> ")" => Expr::Lisp(s, Box::new(e1), Box::new(e2)), 
    //"(" <s:Op> <e1:Expr> <e2:Expr> ")" => Expr::Infix(s, Box::new(e1), Box::new(e2)), 
}


// pub Expr: Expr = {
//     <n:VariableStr> => Expr::VariableStr(n),
//     <not:NotOp> <n:VariableStr> =>  Expr::Not(Box::new(Expr::VariableStr(n))),
//     //<not:NotOp> <e:Expr> => Expr::Not(Box::new(e)),
//     //"(" <n:VariableStr> ")" => Expr::VariableStr(n),
//     //"(" <not:NotOp> "("  <e1:Expr> <s:Op> <e2:Expr>  ")" ")" => Expr::Not(Box::new(Expr::Lisp(s, Box::new(e1), Box::new(e2)))),
//     //"(" <not:NotOp> "(" <n:VariableStr> ")" ")" => Expr::Not(Box::new(Expr::VariableStr(n))),
//     <not:NotOp> "(" <e:Expr> ")" => Expr::Not(Box::new(e)),
    
//     //"(" <not:NotOp> "(" <e:Expr> ")" ")" => Expr::Not(Box::new(e)),
//     "(" <e1:Expr> <s:Op> <e2:Expr> ")" => Expr::Lisp(s, Box::new(e1), Box::new(e2)), 
// }

